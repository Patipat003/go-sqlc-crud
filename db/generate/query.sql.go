// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package generate

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO mockdata (first_name, last_name, email, gender, ip_address ,date)
  VALUES ($1, $2, $3, $4, $5, $6)
  RETURNING id, first_name, last_name, email, gender, ip_address, date
`

type CreateUserParams struct {
	FirstName string
	LastName  string
	Email     sql.NullString
	Gender    sql.NullString
	IpAddress sql.NullString
	Date      sql.NullTime
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (Mockdatum, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Gender,
		arg.IpAddress,
		arg.Date,
	)
	var i Mockdatum
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Gender,
		&i.IpAddress,
		&i.Date,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM mockdata WHERE id = $1
  RETURNING id, first_name, last_name, email, gender, ip_address, date
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) (Mockdatum, error) {
	row := q.db.QueryRowContext(ctx, deleteUser, id)
	var i Mockdatum
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Gender,
		&i.IpAddress,
		&i.Date,
	)
	return i, err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, first_name, last_name, email, gender, ip_address, date 
  FROM mockdata ORDER BY id
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]Mockdatum, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Mockdatum
	for rows.Next() {
		var i Mockdatum
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Gender,
			&i.IpAddress,
			&i.Date,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, first_name, last_name, email, gender, ip_address, date 
  FROM mockdata WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (Mockdatum, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i Mockdatum
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Gender,
		&i.IpAddress,
		&i.Date,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE mockdata SET first_name=$1, last_name=$2 WHERE id=$3
  RETURNING id, first_name, last_name, email, gender, ip_address, date
`

type UpdateUserParams struct {
	FirstName string
	LastName  string
	ID        int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (Mockdatum, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.FirstName, arg.LastName, arg.ID)
	var i Mockdatum
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Gender,
		&i.IpAddress,
		&i.Date,
	)
	return i, err
}
